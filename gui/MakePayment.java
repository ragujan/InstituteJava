/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import Util.CreateObject;
import Util.FilterDocRagRegex;
import Util.InsertTable;
import Util.JOP;
import Util.LoadCatsNBrands;
import Util.LoadTables;
import Util.SetEmptyItems;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import model.MySql;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author acer
 */
public final class MakePayment extends javax.swing.JFrame {

    /**
     * Creates new form MakePayment
     */
    public MakePayment() {
        initComponents();
        setValidation();
        loadTable();
        this.cdesc.setEditable(false);
        LoadCatsNBrands.loadPayments(jComboBox1);
    }
    StudentEnrollment se;
    AdvancedSearch as;
    boolean isadvancedSearchInvolved = false;
    boolean isstudentEnrollInvolved = false;

    public MakePayment(StudentEnrollment se, String[] data) {
        this();
        this.se = se;
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        isstudentEnrollInvolved = true;
        this.sid.setText(data[0]);
        this.sname.setText(data[1]);
        this.cid.setText(data[2]);
        this.cdesc.setText(data[3]);
        this.subname.setText(data[4]);
        this.subprice.setText(data[5]);
        this.jTextField1.setText(data[5]);

    }

    public MakePayment(AdvancedSearch se, String[] data) {
        this();
        this.as = se;
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        isadvancedSearchInvolved = true;
        this.sid.setText(data[0]);
        this.sname.setText(data[1]);
        this.cid.setText(data[2]);
        this.cdesc.setText(data[3]);
        this.subname.setText(data[4]);
        this.subprice.setText(data[6]);
        this.jTextField1.setText(data[5]);

    }

    public void setValidation() {
        String priceregex = "^\\d*([,]\\d*)*([.]\\d*)?";
        FilterDocRagRegex name = new FilterDocRagRegex(jTextField1, priceregex);
        name.setDocFilter();

    }
    String loadTableQuery = "SELECT * FROM `payment`\n"
            + "INNER JOIN `student_has_class`\n"
            + "ON `student_has_class`.`student_has_class_id`=`payment`.`student_has_class_id`\n"
            + "INNER JOIN `class`\n"
            + "ON `class`.`class_id` = `student_has_class`.`class_class_id` \n"
            + "INNER JOIN `student`\n"
            + "ON `student`.`student_id` = `student_has_class`.`student_student_id`\n"
            + "INNER JOIN `payment_method`\n"
            + "ON `payment_method`.`payment_method_id` = `payment`.`payment_method_id`";
    public String selectedTeacherSubjectId = "";

    public void loadTable() {
        String sort = "ORDER BY `paymenttime` ASC";

        StringBuilder stringquerybuild = new StringBuilder();
        stringquerybuild.append(this.loadTableQuery).toString();
        stringquerybuild.append(sort).toString();
        String query = stringquerybuild.toString();
        String[] colnames = {"unique_id", "payment_method_name", "paid_amount", "balance", "student_id", "student_name", "class_id", "class_desc", "paymenttime"};
        LoadTables lt = new LoadTables(jTable1, query, colnames);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        sid = new javax.swing.JLabel();
        snamelabel = new javax.swing.JLabel();
        sname = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cid = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cdesc = new javax.swing.JTextField();
        subname = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        subprice = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jComboBox2 = new javax.swing.JComboBox<>();
        jTextField2 = new javax.swing.JTextField();
        Search = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Student_id");

        sid.setText("none");

        snamelabel.setText("Student_name");

        sname.setText("none");

        jLabel3.setText("Class_id");

        cid.setText("none");

        jLabel7.setText("Class_desc");

        subname.setText("none");

        jLabel9.setText("Subject_name");

        subprice.setText("none");

        jButton1.setText("Pay");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Payment Method");

        jButton3.setText("Home");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(sname, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(sid, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(26, 26, 26))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2)
                            .addComponent(jComboBox1, 0, 216, Short.MAX_VALUE)
                            .addComponent(jTextField1))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(subprice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                                .addComponent(snamelabel, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(subname, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cid, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(cdesc, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sid, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(snamelabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sname, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cid))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cdesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subname, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(subprice, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addGap(28, 28, 28))
        );

        jPanel3.add(jPanel1, java.awt.BorderLayout.WEST);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Payment_id", "Payment", "Amount", "Balance", "Student_Id", "Student_Name", "Class_Id", "Class_Desc", "Time"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NAME AZ", "NAME ZA", "DATETIME NEW TO OLD", "DATETIME OLD TO NEW", "BALANCE ONLY", "OVERPAID", "CLEAR PAYMENTS", "PAYMENT HIGH TO LOW", "PAYMENT LOW TO HIGH" }));

        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        jButton2.setText("Advanced");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 767, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Search)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox2)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                            .addComponent(Search)
                            .addComponent(jButton2))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.add(jPanel4, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JComponent[] jcp = {sid, sname, cid, cdesc, subname, subprice, jTextField1, jComboBox1};
        boolean insertStatement = false;
        boolean updateStatement = false;
        String sid = this.sid.getText();
        String cid = this.cid.getText();
        String sprice = this.subprice.getText();
        String paymentMethod = this.jComboBox1.getSelectedItem().toString();
        String payment = this.jTextField1.getText();
        if (sid.equals("none")) {
            JOP.setJOPMessage(this, "subject id is not selected please select subject", "Subject Id", 1);
        } else if (cid.equals("none")) {
            JOP.setJOPMessage(this, "class id is not selected please select class", "Class Id", 1);

        } else if (sprice.equals("none")) {
            JOP.setJOPMessage(this, "price is not selected please select price", "Price", 1);

        } else if (paymentMethod.equals("Select Payment")) {
            JOP.setJOPMessage(this, "Please select a valid payment method", "Payment Method", 1);

        } else if (payment.isEmpty()) {
            JOP.setJOPMessage(this, "Please enter the payment amount", "Payment ", 1);

        } else {
            ResultSet rs = null;
            String paymentMethodId = null;

            try {
                rs = MySql.sq("SELECT `payment_method_id` FROM `payment_method` WHERE `payment_method_name`='" + paymentMethod + "'");
                rs.next();
                paymentMethodId = rs.getString("payment_method_id");
                rs = MySql.sq("SELECT * FROM `student_has_class`  \n"
                        + "WHERE `student_has_class`.`class_class_id` = '" + cid + "' AND `student_has_class`.`student_student_id` = '" + sid + "'");

                if (rs.next()) {

                    rs = MySql.sq("SELECT *\n"
                            + "FROM `student_has_class`\n"
                            + "INNER JOIN `payment` ON `payment`.`student_has_class_id` = `student_has_class`.`student_has_class_id`\n"
                            + "WHERE `student_student_id`='" + sid + "' AND `class_class_id`='" + cid + "' ");
                    double totalpaidAmount = 0;
                    ResultSet loopRs = MySql.sq("SELECT *\n"
                            + "FROM `student_has_class`\n"
                            + "INNER JOIN `payment` ON `payment`.`student_has_class_id` = `student_has_class`.`student_has_class_id`\n"
                            + "WHERE `student_student_id`='" + sid + "' AND `class_class_id`='" + cid + "' ");
                    //if a row found in student_has_class and rows found in payment
                    if (rs.next()) {
                        double oldbalance = 0;
                        while (loopRs.next()) {
                            double paidAmounts = Double.parseDouble(loopRs.getString("paid_amount"));

                            totalpaidAmount += paidAmounts;
                            System.out.println("total paid amounts are " + totalpaidAmount);
                            oldbalance = Double.parseDouble(sprice) - (totalpaidAmount);
                            System.out.println("old balance is " + oldbalance);

                        }
                        if (oldbalance > 0) {
                            String shcId = rs.getString("student_has_class_id");
                            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                            String currentTime = sdf.format(new Date());
                            String milli = Long.toString(System.currentTimeMillis());

                            String newBalance = Double.toString(Double.parseDouble(sprice) - (Double.parseDouble(payment) + totalpaidAmount));

                            ArrayList<String> info = new ArrayList<String>();
                            //setting up insert query for payment table
                            info.add(newBalance);
                            info.add(payment);
                            info.add(paymentMethodId);
                            info.add(currentTime);
                            info.add(shcId);
                            info.add(milli);
                            InsertTable it = new InsertTable("payment", info);
                            SetEmptyItems.emptyItems(jcp);
                            updateStatement = true;
                            String jasperPath = "src//resources//insti1.jrxml";
                            try {
                                JasperReport jr = JasperCompileManager.compileReport(jasperPath);
                                HashMap<String, Object> hm = new HashMap<String, Object>();
                                hm.put("Date", currentTime);
                                hm.put("Sid", sid);
                                hm.put("PIid", milli);
                                hm.put("Sprice", sprice);
                                hm.put("SName", sname.getText());
                                hm.put("SubName", subname.getText());
                                hm.put("Amount", payment);
                                hm.put("Due", newBalance);

                                JREmptyDataSource jreds = new JREmptyDataSource();
                                JasperPrint jp = JasperFillManager.fillReport(jr, hm, jreds);
                                JasperViewer.viewReport(jp, false);
                            } catch (JRException ex) {
                               
                            }
                        } else {
                            JOP.setJOPMessage(this, "This student already paid what he/\'/she has to pay", "Payment ", 1);
                        }
                    } else {
                        //if a row found in student_has_class and no rows found in payment
                        ResultSet newlyInsertedIdSearch = MySql.sq("SELECT * FROM `student_has_class`  \n"
                                + "WHERE `student_has_class`.`class_class_id` = '" + cid + "' AND `student_has_class`.`student_student_id` = '" + sid + "'");
                        newlyInsertedIdSearch.next();
                        String newlyInsertedId = newlyInsertedIdSearch.getString("student_has_class_id");
                        String milli = Long.toString(System.currentTimeMillis());
                        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                        String currentTime = sdf.format(new Date());
                        String newBalance = Double.toString(Double.parseDouble(sprice) - Double.parseDouble(payment));
                        ArrayList<String> info = new ArrayList<String>();
                        // insert query has been set for payment table
                        info.add(newBalance);
                        info.add(payment);
                        info.add(paymentMethodId);
                        info.add(currentTime);
                        info.add(newlyInsertedId);
                        info.add(milli);

                        InsertTable it = new InsertTable("payment", info);
                        SetEmptyItems.emptyItems(jcp);
                    }

                } else {
                    //if this the class id and student id together matched a row in student has class table
                    ArrayList<String> info = new ArrayList<String>();
                    String status = "2";

                    info.add(cid);
                    info.add(status);
                    info.add(sid);

                    InsertTable it = new InsertTable("student_has_class", info);
                    info.clear();

                    ResultSet newlyInsertedIdSearch = MySql.sq("SELECT * FROM `student_has_class`  \n"
                            + "WHERE `student_has_class`.`class_class_id` = '" + cid + "' AND `student_has_class`.`student_student_id` = '" + sid + "'");
                    newlyInsertedIdSearch.next();
                    String newlyInsertedId = newlyInsertedIdSearch.getString("student_has_class_id");
                    String milli = Long.toString(System.currentTimeMillis());
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    String currentTime = sdf.format(new Date());
                    String newBalance = Double.toString(Double.parseDouble(sprice) - Double.parseDouble(payment));

                    // info.add(balance);
                    info.add(newBalance);
                    info.add(payment);
                    info.add(paymentMethodId);
                    info.add(currentTime);
                    info.add(newlyInsertedId);
                    info.add(milli);

                    it = new InsertTable("payment", info);

                    String jasperPath = "src//resources//insti1.jrxml";
                    try {
                        JasperReport jr = JasperCompileManager.compileReport(jasperPath);
                        HashMap<String, Object> hm = new HashMap<String, Object>();
                        hm.put("Date", currentTime);
                        hm.put("Sid", sid);
                        hm.put("PIid", milli);
                        hm.put("Sprice", sprice);
                        hm.put("SName", sname.getText());
                        hm.put("SubName", subname.getText());
                        hm.put("Amount", payment);
                        hm.put("Due", newBalance);

                        JREmptyDataSource jreds = new JREmptyDataSource();
                        JasperPrint jp = JasperFillManager.fillReport(jr, hm, jreds);
                        JasperViewer.viewReport(jp, false);
                    } catch (JRException ex) {
                       
                    }

                    insertStatement = true;

                }

            } catch (SQLException ex) {
                Logger.getLogger(MakePayment.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(MakePayment.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (updateStatement || insertStatement) {
                int op = JOptionPane.showConfirmDialog(this, "Do want to set the attendance present ? ", "Attendance Change", JOptionPane.YES_NO_OPTION);
                if (op == 0) {
                    MySql.iud("UPDATE `student_has_class` SET `status_id`='1' WHERE `student_student_id`='" + sid + "' AND `class_class_id`='" + cid + "'");
                }
            }
            if (isstudentEnrollInvolved) {
                this.se.loadTable();
            }
            if (isadvancedSearchInvolved) {
                this.as.loadTable();
            }
            this.loadTable();
            SetEmptyItems.emptyItems(jcp);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        // TODO add your handling code here:
        String sort = jComboBox2.getSelectedItem().toString();
        String searchText = jTextField2.getText();
        String sortQuery = null;
        if (searchText.isEmpty()) {
            if (sort.equals("NAME AZ")) {
                sortQuery = "ORDER BY `student`.`student_name` ASC";
            } else if (sort.equals("NAME ZA")) {
                sortQuery = "ORDER BY `student`.`student_name` DESC";
            } else if (sort.equals("DATETIME NEW TO OLD")) {
                sortQuery = "ORDER BY `paymenttime` DESC";
            } else if (sort.equals("DATETIME OLD TO NEW")) {
                sortQuery = "ORDER BY `paymenttime` ASC";
            } else if (sort.equals("BALANCE ONLY")) {
                sortQuery = "WHERE `payment`.`balance`>'0'";
            } else if (sort.equals("OVERPAID")) {
                sortQuery = "WHERE `payment`.`balance`<'0'";
            } else if (sort.equals("CLEAR PAYMENTS")) {
                sortQuery = "WHERE `payment`.`balance`='0'";
            } else if (sort.equals("PAYMENT HIGH TO LOW")) {
                sortQuery = "ORDER BY `payment`.`paid_amount` DESC";
            } else if (sort.equals("PAYMENT LOW TO HIGH")) {
                sortQuery = "ORDER BY `payment`.`paid_amount` ASC";
            }

            StringBuilder stringquerybuild = new StringBuilder();
            stringquerybuild.append(this.loadTableQuery).toString();
            stringquerybuild.append(sortQuery).toString();
            String query = stringquerybuild.toString();
            String[] colnames = {"unique_id", "payment_method_name", "paid_amount", "balance", "student_id", "student_name", "class_id", "class_desc", "paymenttime"};
            LoadTables lt = new LoadTables(jTable1, query, colnames);
        } else {
            if (sort.equals("NAME AZ")) {
                sortQuery = "ORDER BY `student`.`student_name` ASC";
            } else if (sort.equals("NAME ZA")) {
                sortQuery = "ORDER BY `student`.`student_name` DESC";
            } else if (sort.equals("DATETIME NEW TO OLD")) {
                sortQuery = "ORDER BY `paymenttime` DESC";
            } else if (sort.equals("DATETIME OLD TO NEW")) {
                sortQuery = "ORDER BY `paymenttime` ASC";
            } else if (sort.equals("BALANCE ONLY")) {
                sortQuery = "WHERE `payment`.`balance`>'0'";
            } else if (sort.equals("OVERPAID")) {
                sortQuery = "WHERE `payment`.`balance`<'0'";
            } else if (sort.equals("CLEAR PAYMENTS")) {
                sortQuery = "WHERE `payment`.`balance`='0'";
            } else if (sort.equals("PAYMENT HIGH TO LOW")) {
                sortQuery = "ORDER BY `payment`.`paid_amount` DESC";
            } else if (sort.equals("PAYMENT LOW TO HIGH")) {
                sortQuery = "ORDER BY `payment`.`paid_amount` ASC";
            }
            StringBuilder stringquerybuild = new StringBuilder();

            String whereQuery = "WHERE `student`.`student_name` LIKE '%" + searchText + "%' ";
            stringquerybuild.append(this.loadTableQuery);
            stringquerybuild.append(whereQuery);
            stringquerybuild.append(sortQuery);
            String query = stringquerybuild.toString();

            String[] colnames = {"unique_id", "payment_method_name", "paid_amount", "balance", "student_id", "student_name", "class_id", "class_desc", "paymenttime"};
            LoadTables lt = new LoadTables(jTable1, query, colnames);
        }
    }//GEN-LAST:event_SearchActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        AdvancedSearch as = new AdvancedSearch();
        as.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        CreateObject.make(new Home());
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MakePayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MakePayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MakePayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MakePayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MakePayment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Search;
    private javax.swing.JTextField cdesc;
    private javax.swing.JLabel cid;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel sid;
    private javax.swing.JLabel sname;
    private javax.swing.JLabel snamelabel;
    private javax.swing.JLabel subname;
    private javax.swing.JLabel subprice;
    // End of variables declaration//GEN-END:variables
}
